apply plugin: 'com.android.application'
apply plugin: 'android-apt'

def AAVersion = '3.3.1'

def APP_ID = "com.simple_android_project_template"

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    } catch (s) {
        println s
        return 1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (s) {
        println s
        return "1.0"
    }
}

apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName android.defaultConfig.applicationId
    }
}

def completeVersion = getVersionName() + "." + getVersionCode()

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId APP_ID
        minSdkVersion 16
        targetSdkVersion 22
        versionCode getVersionCode() ?: 1
        versionName completeVersion ?: 1
    }

    dexOptions {
        //incremental true
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES'
    }

    signingConfigs {
        release {
            storeFile file("your_keystore.jks")
            storePassword "storePassword"
            keyAlias "keyAlias"
            keyPassword "keyPassword"
        }
    }

    buildTypes {
        def BOOLEAN = "boolean"
        def TRUE = "true"
        def FALSE = "false"
        def STRING = "String"
        def LONG = "long"

        // Parse configurations
        def PARSE_CLIENT_KEY = "PARSE_CLIENT_KEY"
        def PARSE_APP_ID = "PARSE_APP_ID"

        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField STRING, PARSE_CLIENT_KEY, "\"xxxxxxx\""
            buildConfigField STRING, PARSE_APP_ID, "\"xxxxxxx\""
        }

        debug {
            minifyEnabled false
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'

            buildConfigField STRING, PARSE_CLIENT_KEY, "\"xxxxxxx\""
            buildConfigField STRING, PARSE_APP_ID, "\"xxxxxxx\""
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // AA Dependency
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"

    // Otto Event Bus Dependency
    compile 'com.squareup:otto:1.3.7'

    // Bols Dependency, needed by Parse
    compile 'com.parse.bolts:bolts-android:1.2.0'

    // Glide Dependency
    compile 'com.github.bumptech.glide:glide:3.6.0'

    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:cardview-v7:22.2.0'
    compile 'com.android.support:support-annotations:22.2.0'

    compile ('com.android.support:recyclerview-v7:22.2.0') {
        exclude module: 'support-v4'
    }

    compile ('com.android.support:design:22.2.0') {
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
    }
}
