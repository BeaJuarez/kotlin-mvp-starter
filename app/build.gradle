apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'

def final circleBuild = System.getenv("CI") == "true"
def final preDexEnabled = "true" == System.getProperty("pre-dex", "true") && !circleBuild
def final dexInProcessEnabled = "true" == System.getProperty("dex-in-process", "true") && !circleBuild

static def generateVersionCode() {
    try {
        def cmd = 'git rev-list --count HEAD'
        cmd.execute().text.trim().toInteger()
    } catch (ignored) {
        1
    }
}

static def generateVersionName() {
    try {
        def cmd = 'git describe --tags --abbrev=0'
        cmd.execute().text.trim()
    } catch (ignored) {
        "1.0"
    }
}

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "br.com.wakim.mvp_starter"

        minSdkVersion rootProject.ext.mindkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1
        versionName "0.0.0"

        resConfigs "en", "pt-rBR"
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    dexOptions {
        javaMaxHeapSize "2g"
        preDexLibraries preDexEnabled
        dexInProcess = dexInProcessEnabled
    }

    signingConfigs {
//        release {
//            storeFile file("xyz.jks")
//            storePassword "xyz"
//            keyAlias "xyz"
//            keyPassword "xyz"
//        }

//        debug {
//            storeFile file("xyz.jks")
//            storePassword "xyz"
//            keyAlias "xyz"
//            keyPassword "xyz"
//        }
    }

    buildTypes {
        release {
            minifyEnabled true

//            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            useProguard false

//            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'

        debug.java.srcDirs += 'src/debug/kotlin'

        test.java.srcDirs += 'src/test/kotlin'
    }

    flavorDimensions "environment"

    productFlavors {
        def STRING = "String"
        def API_URL = "API_URL"

        production {
            dimension "environment"
            buildConfigField STRING, API_URL, "\"https://jsonplaceholder.typicode.com\""
        }

        staging {
            dimension "environment"
            buildConfigField STRING, API_URL, "\"https://jsonplaceholder.typicode.com\""
        }

        development {
            dimension "environment"
            buildConfigField STRING, API_URL, "\"https://jsonplaceholder.typicode.com\""
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

android.applicationVariants.all { variant ->
    def mergedFlavor = variant.mergedFlavor

    if (!variant.buildType.isDebuggable()) {
        mergedFlavor.versionCode = generateVersionCode()
        mergedFlavor.versionName = generateVersionName() + "." + generateVersionCode()
    }
}

repositories {
    google()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlinVersion"

    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"

    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"

    implementation "com.squareup.okhttp3:okhttp:$rootProject.okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okHttpVersion"

    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"

    debugImplementation "com.facebook.stetho:stetho:$rootProject.stethoVersion"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:$rootProject.stethoVersion"

    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"

    implementation "com.airbnb.android:epoxy:$rootProject.epoxyVersion"

    kapt "com.android.databinding:compiler:$rootProject.databindVersion"

    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.hamcrestVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$rootProject.kotlinVersion"
    testImplementation ("com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion") {
        exclude module: "kotlin-stdlib"
        exclude module: "kotlin-reflect"
    }
}